# -*- coding: utf-8 -*-
"""NLP_voice_recognition_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zcZHVOCsF-sqn8sJPO0CD-VBlBVXQDVI
"""

!pip install SpeechRecognition

!pip install pydub

!pip install gtts

"""**speech_recognition - "Library for performing speech recognition, with support for several engines and APIs, online and offline"
pydub - "Manipulate audio with a simple and easy high level interface"
gTTS - "Python library and CLI tool to interface with Google Translate's text-to-speech API"**
"""

import os
import speech_recognition as sr
from pydub import AudioSegment
from pydub.playback import play
from gtts import gTTS as tts

"""**function to capture speech.**"""

def capture():
  #capture the audio
  rec = sr.Recognizer()
  
  with sr.Microphone() as source:
    print('I\'M LISTENING..')
    audio = rec.listen(source, phrase_time_limit = 5)
    
  try:
    text = rec.recognize_google(audio, language = 'en-US')
    return text
  except:
    speak('Sorry, I could not understand what you said.')
    return 0

def process_text(name, input):
  #process what is said
  speak(name+ ',you said: " '+ input + '".')
  return

"""**our app to speak, so let's write a function which uses the Google text-to-speech engine to accomplish this**"""

def speak(text):
  #say something
  
  #write output to console
  print(text)
  
  #save audio file
  speech = tts(text=text, lang='en')
  speech_file='input.mp3'
  speech.save(speech_file)
  
  #play audio file
  sound = AudioSegment.from_mp3(speech_file)
  play(sound)
  os.remove(speech_file)

"""**First we print out what was passed to the function to the console; then Google text-to-speech is used to create an audio file from the text; the audio file is saved to disk; and then the file is re-opened and played using the pydub library**"""

!sudo pip install pyaudio

!sudo apt-get install portaudio19-dev

if __name__ == "__main__":
  #first get name
  speak('what is your name?')
  name = capture()
  speak('Hello' + name + '.')
  
  #just keep listening and responding
  while 1:
    speak('what do you have to say?')
    captured_text = capture().lower()
    
    if captured_text == 0:
      continue
      
    if 'quit' in str (captured_text):
      speak('ok, bye,' + name + '.')
      break
      
    #process captured text
    process_text(name,captured_text)

import pyaudio
pa = pyaudio.PyAudio()
pa.get_default_output_device_info()